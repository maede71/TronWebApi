// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tronprotocol/api/api.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Tron.Net.Protocol {
  public static partial class Wallet
  {
    static readonly string __ServiceName = "protocol.Wallet";

    static readonly grpc::Marshaller<global::Tron.Net.Protocol.Account> __Marshaller_Account = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.Account.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.TransferContract> __Marshaller_TransferContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.TransferContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.Transaction> __Marshaller_Transaction = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.Transaction.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.Return> __Marshaller_Return = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.Return.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.AccountUpdateContract> __Marshaller_AccountUpdateContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.AccountUpdateContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.VoteWitnessContract> __Marshaller_VoteWitnessContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.VoteWitnessContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.AssetIssueContract> __Marshaller_AssetIssueContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.AssetIssueContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.WitnessUpdateContract> __Marshaller_WitnessUpdateContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.WitnessUpdateContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.AccountCreateContract> __Marshaller_AccountCreateContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.AccountCreateContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.WitnessCreateContract> __Marshaller_WitnessCreateContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.WitnessCreateContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.TransferAssetContract> __Marshaller_TransferAssetContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.TransferAssetContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.ParticipateAssetIssueContract> __Marshaller_ParticipateAssetIssueContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.ParticipateAssetIssueContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.FreezeBalanceContract> __Marshaller_FreezeBalanceContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.FreezeBalanceContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.UnfreezeBalanceContract> __Marshaller_UnfreezeBalanceContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.UnfreezeBalanceContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.UnfreezeAssetContract> __Marshaller_UnfreezeAssetContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.UnfreezeAssetContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.WithdrawBalanceContract> __Marshaller_WithdrawBalanceContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.WithdrawBalanceContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.UpdateAssetContract> __Marshaller_UpdateAssetContract = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.UpdateAssetContract.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.EmptyMessage> __Marshaller_EmptyMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.EmptyMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.NodeList> __Marshaller_NodeList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.NodeList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.AssetIssueList> __Marshaller_AssetIssueList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.AssetIssueList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.AccountNetMessage> __Marshaller_AccountNetMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.AccountNetMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.BytesMessage> __Marshaller_BytesMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.BytesMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.Block> __Marshaller_Block = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.Block.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.NumberMessage> __Marshaller_NumberMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.NumberMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.BlockLimit> __Marshaller_BlockLimit = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.BlockLimit.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.BlockList> __Marshaller_BlockList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.BlockList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.WitnessList> __Marshaller_WitnessList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.WitnessList.Parser.ParseFrom);

    static readonly grpc::Method<global::Tron.Net.Protocol.Account, global::Tron.Net.Protocol.Account> __Method_GetAccount = new grpc::Method<global::Tron.Net.Protocol.Account, global::Tron.Net.Protocol.Account>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccount",
        __Marshaller_Account,
        __Marshaller_Account);

    static readonly grpc::Method<global::Tron.Net.Protocol.TransferContract, global::Tron.Net.Protocol.Transaction> __Method_CreateTransaction = new grpc::Method<global::Tron.Net.Protocol.TransferContract, global::Tron.Net.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTransaction",
        __Marshaller_TransferContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Tron.Net.Protocol.Transaction, global::Tron.Net.Protocol.Return> __Method_BroadcastTransaction = new grpc::Method<global::Tron.Net.Protocol.Transaction, global::Tron.Net.Protocol.Return>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BroadcastTransaction",
        __Marshaller_Transaction,
        __Marshaller_Return);

    static readonly grpc::Method<global::Tron.Net.Protocol.AccountUpdateContract, global::Tron.Net.Protocol.Transaction> __Method_UpdateAccount = new grpc::Method<global::Tron.Net.Protocol.AccountUpdateContract, global::Tron.Net.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAccount",
        __Marshaller_AccountUpdateContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Tron.Net.Protocol.VoteWitnessContract, global::Tron.Net.Protocol.Transaction> __Method_VoteWitnessAccount = new grpc::Method<global::Tron.Net.Protocol.VoteWitnessContract, global::Tron.Net.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "VoteWitnessAccount",
        __Marshaller_VoteWitnessContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Tron.Net.Protocol.AssetIssueContract, global::Tron.Net.Protocol.Transaction> __Method_CreateAssetIssue = new grpc::Method<global::Tron.Net.Protocol.AssetIssueContract, global::Tron.Net.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAssetIssue",
        __Marshaller_AssetIssueContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Tron.Net.Protocol.WitnessUpdateContract, global::Tron.Net.Protocol.Transaction> __Method_UpdateWitness = new grpc::Method<global::Tron.Net.Protocol.WitnessUpdateContract, global::Tron.Net.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateWitness",
        __Marshaller_WitnessUpdateContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Tron.Net.Protocol.AccountCreateContract, global::Tron.Net.Protocol.Transaction> __Method_CreateAccount = new grpc::Method<global::Tron.Net.Protocol.AccountCreateContract, global::Tron.Net.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAccount",
        __Marshaller_AccountCreateContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Tron.Net.Protocol.WitnessCreateContract, global::Tron.Net.Protocol.Transaction> __Method_CreateWitness = new grpc::Method<global::Tron.Net.Protocol.WitnessCreateContract, global::Tron.Net.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateWitness",
        __Marshaller_WitnessCreateContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Tron.Net.Protocol.TransferAssetContract, global::Tron.Net.Protocol.Transaction> __Method_TransferAsset = new grpc::Method<global::Tron.Net.Protocol.TransferAssetContract, global::Tron.Net.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TransferAsset",
        __Marshaller_TransferAssetContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Tron.Net.Protocol.ParticipateAssetIssueContract, global::Tron.Net.Protocol.Transaction> __Method_ParticipateAssetIssue = new grpc::Method<global::Tron.Net.Protocol.ParticipateAssetIssueContract, global::Tron.Net.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ParticipateAssetIssue",
        __Marshaller_ParticipateAssetIssueContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Tron.Net.Protocol.FreezeBalanceContract, global::Tron.Net.Protocol.Transaction> __Method_FreezeBalance = new grpc::Method<global::Tron.Net.Protocol.FreezeBalanceContract, global::Tron.Net.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FreezeBalance",
        __Marshaller_FreezeBalanceContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Tron.Net.Protocol.UnfreezeBalanceContract, global::Tron.Net.Protocol.Transaction> __Method_UnfreezeBalance = new grpc::Method<global::Tron.Net.Protocol.UnfreezeBalanceContract, global::Tron.Net.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnfreezeBalance",
        __Marshaller_UnfreezeBalanceContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Tron.Net.Protocol.UnfreezeAssetContract, global::Tron.Net.Protocol.Transaction> __Method_UnfreezeAsset = new grpc::Method<global::Tron.Net.Protocol.UnfreezeAssetContract, global::Tron.Net.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnfreezeAsset",
        __Marshaller_UnfreezeAssetContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Tron.Net.Protocol.WithdrawBalanceContract, global::Tron.Net.Protocol.Transaction> __Method_WithdrawBalance = new grpc::Method<global::Tron.Net.Protocol.WithdrawBalanceContract, global::Tron.Net.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "WithdrawBalance",
        __Marshaller_WithdrawBalanceContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Tron.Net.Protocol.UpdateAssetContract, global::Tron.Net.Protocol.Transaction> __Method_UpdateAsset = new grpc::Method<global::Tron.Net.Protocol.UpdateAssetContract, global::Tron.Net.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAsset",
        __Marshaller_UpdateAssetContract,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.NodeList> __Method_ListNodes = new grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.NodeList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNodes",
        __Marshaller_EmptyMessage,
        __Marshaller_NodeList);

    static readonly grpc::Method<global::Tron.Net.Protocol.Account, global::Tron.Net.Protocol.AssetIssueList> __Method_GetAssetIssueByAccount = new grpc::Method<global::Tron.Net.Protocol.Account, global::Tron.Net.Protocol.AssetIssueList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssetIssueByAccount",
        __Marshaller_Account,
        __Marshaller_AssetIssueList);

    static readonly grpc::Method<global::Tron.Net.Protocol.Account, global::Tron.Net.Protocol.AccountNetMessage> __Method_GetAccountNet = new grpc::Method<global::Tron.Net.Protocol.Account, global::Tron.Net.Protocol.AccountNetMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccountNet",
        __Marshaller_Account,
        __Marshaller_AccountNetMessage);

    static readonly grpc::Method<global::Tron.Net.Protocol.BytesMessage, global::Tron.Net.Protocol.AssetIssueContract> __Method_GetAssetIssueByName = new grpc::Method<global::Tron.Net.Protocol.BytesMessage, global::Tron.Net.Protocol.AssetIssueContract>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssetIssueByName",
        __Marshaller_BytesMessage,
        __Marshaller_AssetIssueContract);

    static readonly grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.Block> __Method_GetNowBlock = new grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.Block>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNowBlock",
        __Marshaller_EmptyMessage,
        __Marshaller_Block);

    static readonly grpc::Method<global::Tron.Net.Protocol.NumberMessage, global::Tron.Net.Protocol.Block> __Method_GetBlockByNum = new grpc::Method<global::Tron.Net.Protocol.NumberMessage, global::Tron.Net.Protocol.Block>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByNum",
        __Marshaller_NumberMessage,
        __Marshaller_Block);

    static readonly grpc::Method<global::Tron.Net.Protocol.BytesMessage, global::Tron.Net.Protocol.Block> __Method_GetBlockById = new grpc::Method<global::Tron.Net.Protocol.BytesMessage, global::Tron.Net.Protocol.Block>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockById",
        __Marshaller_BytesMessage,
        __Marshaller_Block);

    static readonly grpc::Method<global::Tron.Net.Protocol.BlockLimit, global::Tron.Net.Protocol.BlockList> __Method_GetBlockByLimitNext = new grpc::Method<global::Tron.Net.Protocol.BlockLimit, global::Tron.Net.Protocol.BlockList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByLimitNext",
        __Marshaller_BlockLimit,
        __Marshaller_BlockList);

    static readonly grpc::Method<global::Tron.Net.Protocol.NumberMessage, global::Tron.Net.Protocol.BlockList> __Method_GetBlockByLatestNum = new grpc::Method<global::Tron.Net.Protocol.NumberMessage, global::Tron.Net.Protocol.BlockList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByLatestNum",
        __Marshaller_NumberMessage,
        __Marshaller_BlockList);

    static readonly grpc::Method<global::Tron.Net.Protocol.BytesMessage, global::Tron.Net.Protocol.Transaction> __Method_GetTransactionById = new grpc::Method<global::Tron.Net.Protocol.BytesMessage, global::Tron.Net.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionById",
        __Marshaller_BytesMessage,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.WitnessList> __Method_ListWitnesses = new grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.WitnessList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListWitnesses",
        __Marshaller_EmptyMessage,
        __Marshaller_WitnessList);

    static readonly grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.AssetIssueList> __Method_GetAssetIssueList = new grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.AssetIssueList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssetIssueList",
        __Marshaller_EmptyMessage,
        __Marshaller_AssetIssueList);

    static readonly grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.NumberMessage> __Method_TotalTransaction = new grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.NumberMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TotalTransaction",
        __Marshaller_EmptyMessage,
        __Marshaller_NumberMessage);

    static readonly grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.NumberMessage> __Method_GetNextMaintenanceTime = new grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.NumberMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNextMaintenanceTime",
        __Marshaller_EmptyMessage,
        __Marshaller_NumberMessage);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tron.Net.Protocol.ApiReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Wallet</summary>
    public abstract partial class WalletBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Account> GetAccount(global::Tron.Net.Protocol.Account request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Transaction> CreateTransaction(global::Tron.Net.Protocol.TransferContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Return> BroadcastTransaction(global::Tron.Net.Protocol.Transaction request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Transaction> UpdateAccount(global::Tron.Net.Protocol.AccountUpdateContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Transaction> VoteWitnessAccount(global::Tron.Net.Protocol.VoteWitnessContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Transaction> CreateAssetIssue(global::Tron.Net.Protocol.AssetIssueContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Transaction> UpdateWitness(global::Tron.Net.Protocol.WitnessUpdateContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Transaction> CreateAccount(global::Tron.Net.Protocol.AccountCreateContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Transaction> CreateWitness(global::Tron.Net.Protocol.WitnessCreateContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Transaction> TransferAsset(global::Tron.Net.Protocol.TransferAssetContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Transaction> ParticipateAssetIssue(global::Tron.Net.Protocol.ParticipateAssetIssueContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Transaction> FreezeBalance(global::Tron.Net.Protocol.FreezeBalanceContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Transaction> UnfreezeBalance(global::Tron.Net.Protocol.UnfreezeBalanceContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Transaction> UnfreezeAsset(global::Tron.Net.Protocol.UnfreezeAssetContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Transaction> WithdrawBalance(global::Tron.Net.Protocol.WithdrawBalanceContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Transaction> UpdateAsset(global::Tron.Net.Protocol.UpdateAssetContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.NodeList> ListNodes(global::Tron.Net.Protocol.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.AssetIssueList> GetAssetIssueByAccount(global::Tron.Net.Protocol.Account request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.AccountNetMessage> GetAccountNet(global::Tron.Net.Protocol.Account request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.AssetIssueContract> GetAssetIssueByName(global::Tron.Net.Protocol.BytesMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Block> GetNowBlock(global::Tron.Net.Protocol.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Block> GetBlockByNum(global::Tron.Net.Protocol.NumberMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Block> GetBlockById(global::Tron.Net.Protocol.BytesMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.BlockList> GetBlockByLimitNext(global::Tron.Net.Protocol.BlockLimit request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.BlockList> GetBlockByLatestNum(global::Tron.Net.Protocol.NumberMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Transaction> GetTransactionById(global::Tron.Net.Protocol.BytesMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.WitnessList> ListWitnesses(global::Tron.Net.Protocol.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.AssetIssueList> GetAssetIssueList(global::Tron.Net.Protocol.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.NumberMessage> TotalTransaction(global::Tron.Net.Protocol.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.NumberMessage> GetNextMaintenanceTime(global::Tron.Net.Protocol.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Wallet</summary>
    public partial class WalletClient : grpc::ClientBase<WalletClient>
    {
      /// <summary>Creates a new client for Wallet</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public WalletClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Wallet that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public WalletClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected WalletClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected WalletClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Tron.Net.Protocol.Account GetAccount(global::Tron.Net.Protocol.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Account GetAccount(global::Tron.Net.Protocol.Account request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Account> GetAccountAsync(global::Tron.Net.Protocol.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Account> GetAccountAsync(global::Tron.Net.Protocol.Account request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccount, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.Transaction CreateTransaction(global::Tron.Net.Protocol.TransferContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Transaction CreateTransaction(global::Tron.Net.Protocol.TransferContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTransaction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> CreateTransactionAsync(global::Tron.Net.Protocol.TransferContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> CreateTransactionAsync(global::Tron.Net.Protocol.TransferContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTransaction, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.Return BroadcastTransaction(global::Tron.Net.Protocol.Transaction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BroadcastTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Return BroadcastTransaction(global::Tron.Net.Protocol.Transaction request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BroadcastTransaction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Return> BroadcastTransactionAsync(global::Tron.Net.Protocol.Transaction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BroadcastTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Return> BroadcastTransactionAsync(global::Tron.Net.Protocol.Transaction request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BroadcastTransaction, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.Transaction UpdateAccount(global::Tron.Net.Protocol.AccountUpdateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Transaction UpdateAccount(global::Tron.Net.Protocol.AccountUpdateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> UpdateAccountAsync(global::Tron.Net.Protocol.AccountUpdateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> UpdateAccountAsync(global::Tron.Net.Protocol.AccountUpdateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAccount, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.Transaction VoteWitnessAccount(global::Tron.Net.Protocol.VoteWitnessContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VoteWitnessAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Transaction VoteWitnessAccount(global::Tron.Net.Protocol.VoteWitnessContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VoteWitnessAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> VoteWitnessAccountAsync(global::Tron.Net.Protocol.VoteWitnessContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VoteWitnessAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> VoteWitnessAccountAsync(global::Tron.Net.Protocol.VoteWitnessContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VoteWitnessAccount, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.Transaction CreateAssetIssue(global::Tron.Net.Protocol.AssetIssueContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAssetIssue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Transaction CreateAssetIssue(global::Tron.Net.Protocol.AssetIssueContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAssetIssue, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> CreateAssetIssueAsync(global::Tron.Net.Protocol.AssetIssueContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAssetIssueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> CreateAssetIssueAsync(global::Tron.Net.Protocol.AssetIssueContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAssetIssue, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.Transaction UpdateWitness(global::Tron.Net.Protocol.WitnessUpdateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateWitness(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Transaction UpdateWitness(global::Tron.Net.Protocol.WitnessUpdateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateWitness, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> UpdateWitnessAsync(global::Tron.Net.Protocol.WitnessUpdateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateWitnessAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> UpdateWitnessAsync(global::Tron.Net.Protocol.WitnessUpdateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateWitness, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.Transaction CreateAccount(global::Tron.Net.Protocol.AccountCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Transaction CreateAccount(global::Tron.Net.Protocol.AccountCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> CreateAccountAsync(global::Tron.Net.Protocol.AccountCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> CreateAccountAsync(global::Tron.Net.Protocol.AccountCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAccount, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.Transaction CreateWitness(global::Tron.Net.Protocol.WitnessCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWitness(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Transaction CreateWitness(global::Tron.Net.Protocol.WitnessCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateWitness, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> CreateWitnessAsync(global::Tron.Net.Protocol.WitnessCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWitnessAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> CreateWitnessAsync(global::Tron.Net.Protocol.WitnessCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateWitness, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.Transaction TransferAsset(global::Tron.Net.Protocol.TransferAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferAsset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Transaction TransferAsset(global::Tron.Net.Protocol.TransferAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TransferAsset, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> TransferAssetAsync(global::Tron.Net.Protocol.TransferAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferAssetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> TransferAssetAsync(global::Tron.Net.Protocol.TransferAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TransferAsset, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.Transaction ParticipateAssetIssue(global::Tron.Net.Protocol.ParticipateAssetIssueContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ParticipateAssetIssue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Transaction ParticipateAssetIssue(global::Tron.Net.Protocol.ParticipateAssetIssueContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ParticipateAssetIssue, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> ParticipateAssetIssueAsync(global::Tron.Net.Protocol.ParticipateAssetIssueContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ParticipateAssetIssueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> ParticipateAssetIssueAsync(global::Tron.Net.Protocol.ParticipateAssetIssueContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ParticipateAssetIssue, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.Transaction FreezeBalance(global::Tron.Net.Protocol.FreezeBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FreezeBalance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Transaction FreezeBalance(global::Tron.Net.Protocol.FreezeBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FreezeBalance, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> FreezeBalanceAsync(global::Tron.Net.Protocol.FreezeBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FreezeBalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> FreezeBalanceAsync(global::Tron.Net.Protocol.FreezeBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FreezeBalance, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.Transaction UnfreezeBalance(global::Tron.Net.Protocol.UnfreezeBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnfreezeBalance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Transaction UnfreezeBalance(global::Tron.Net.Protocol.UnfreezeBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnfreezeBalance, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> UnfreezeBalanceAsync(global::Tron.Net.Protocol.UnfreezeBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnfreezeBalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> UnfreezeBalanceAsync(global::Tron.Net.Protocol.UnfreezeBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnfreezeBalance, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.Transaction UnfreezeAsset(global::Tron.Net.Protocol.UnfreezeAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnfreezeAsset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Transaction UnfreezeAsset(global::Tron.Net.Protocol.UnfreezeAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnfreezeAsset, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> UnfreezeAssetAsync(global::Tron.Net.Protocol.UnfreezeAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnfreezeAssetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> UnfreezeAssetAsync(global::Tron.Net.Protocol.UnfreezeAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnfreezeAsset, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.Transaction WithdrawBalance(global::Tron.Net.Protocol.WithdrawBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WithdrawBalance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Transaction WithdrawBalance(global::Tron.Net.Protocol.WithdrawBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WithdrawBalance, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> WithdrawBalanceAsync(global::Tron.Net.Protocol.WithdrawBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WithdrawBalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> WithdrawBalanceAsync(global::Tron.Net.Protocol.WithdrawBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WithdrawBalance, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.Transaction UpdateAsset(global::Tron.Net.Protocol.UpdateAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Transaction UpdateAsset(global::Tron.Net.Protocol.UpdateAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAsset, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> UpdateAssetAsync(global::Tron.Net.Protocol.UpdateAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAssetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> UpdateAssetAsync(global::Tron.Net.Protocol.UpdateAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAsset, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.NodeList ListNodes(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNodes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.NodeList ListNodes(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNodes, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.NodeList> ListNodesAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNodesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.NodeList> ListNodesAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNodes, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.AssetIssueList GetAssetIssueByAccount(global::Tron.Net.Protocol.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueByAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.AssetIssueList GetAssetIssueByAccount(global::Tron.Net.Protocol.Account request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssetIssueByAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.AssetIssueList> GetAssetIssueByAccountAsync(global::Tron.Net.Protocol.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueByAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.AssetIssueList> GetAssetIssueByAccountAsync(global::Tron.Net.Protocol.Account request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssetIssueByAccount, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.AccountNetMessage GetAccountNet(global::Tron.Net.Protocol.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountNet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.AccountNetMessage GetAccountNet(global::Tron.Net.Protocol.Account request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccountNet, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.AccountNetMessage> GetAccountNetAsync(global::Tron.Net.Protocol.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountNetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.AccountNetMessage> GetAccountNetAsync(global::Tron.Net.Protocol.Account request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccountNet, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.AssetIssueContract GetAssetIssueByName(global::Tron.Net.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueByName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.AssetIssueContract GetAssetIssueByName(global::Tron.Net.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssetIssueByName, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.AssetIssueContract> GetAssetIssueByNameAsync(global::Tron.Net.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueByNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.AssetIssueContract> GetAssetIssueByNameAsync(global::Tron.Net.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssetIssueByName, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.Block GetNowBlock(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Block GetNowBlock(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNowBlock, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Block> GetNowBlockAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Block> GetNowBlockAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNowBlock, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.Block GetBlockByNum(global::Tron.Net.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Block GetBlockByNum(global::Tron.Net.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByNum, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Block> GetBlockByNumAsync(global::Tron.Net.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Block> GetBlockByNumAsync(global::Tron.Net.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByNum, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.Block GetBlockById(global::Tron.Net.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Block GetBlockById(global::Tron.Net.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Block> GetBlockByIdAsync(global::Tron.Net.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Block> GetBlockByIdAsync(global::Tron.Net.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockById, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.BlockList GetBlockByLimitNext(global::Tron.Net.Protocol.BlockLimit request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByLimitNext(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.BlockList GetBlockByLimitNext(global::Tron.Net.Protocol.BlockLimit request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByLimitNext, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.BlockList> GetBlockByLimitNextAsync(global::Tron.Net.Protocol.BlockLimit request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByLimitNextAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.BlockList> GetBlockByLimitNextAsync(global::Tron.Net.Protocol.BlockLimit request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByLimitNext, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.BlockList GetBlockByLatestNum(global::Tron.Net.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByLatestNum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.BlockList GetBlockByLatestNum(global::Tron.Net.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByLatestNum, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.BlockList> GetBlockByLatestNumAsync(global::Tron.Net.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByLatestNumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.BlockList> GetBlockByLatestNumAsync(global::Tron.Net.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByLatestNum, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.Transaction GetTransactionById(global::Tron.Net.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Transaction GetTransactionById(global::Tron.Net.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> GetTransactionByIdAsync(global::Tron.Net.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Transaction> GetTransactionByIdAsync(global::Tron.Net.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionById, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.WitnessList ListWitnesses(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWitnesses(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.WitnessList ListWitnesses(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListWitnesses, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.WitnessList> ListWitnessesAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWitnessesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.WitnessList> ListWitnessesAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListWitnesses, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.AssetIssueList GetAssetIssueList(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.AssetIssueList GetAssetIssueList(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssetIssueList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.AssetIssueList> GetAssetIssueListAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.AssetIssueList> GetAssetIssueListAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssetIssueList, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.NumberMessage TotalTransaction(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TotalTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.NumberMessage TotalTransaction(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TotalTransaction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.NumberMessage> TotalTransactionAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TotalTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.NumberMessage> TotalTransactionAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TotalTransaction, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.NumberMessage GetNextMaintenanceTime(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNextMaintenanceTime(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.NumberMessage GetNextMaintenanceTime(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNextMaintenanceTime, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.NumberMessage> GetNextMaintenanceTimeAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNextMaintenanceTimeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.NumberMessage> GetNextMaintenanceTimeAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNextMaintenanceTime, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override WalletClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WalletClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(WalletBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAccount, serviceImpl.GetAccount)
          .AddMethod(__Method_CreateTransaction, serviceImpl.CreateTransaction)
          .AddMethod(__Method_BroadcastTransaction, serviceImpl.BroadcastTransaction)
          .AddMethod(__Method_UpdateAccount, serviceImpl.UpdateAccount)
          .AddMethod(__Method_VoteWitnessAccount, serviceImpl.VoteWitnessAccount)
          .AddMethod(__Method_CreateAssetIssue, serviceImpl.CreateAssetIssue)
          .AddMethod(__Method_UpdateWitness, serviceImpl.UpdateWitness)
          .AddMethod(__Method_CreateAccount, serviceImpl.CreateAccount)
          .AddMethod(__Method_CreateWitness, serviceImpl.CreateWitness)
          .AddMethod(__Method_TransferAsset, serviceImpl.TransferAsset)
          .AddMethod(__Method_ParticipateAssetIssue, serviceImpl.ParticipateAssetIssue)
          .AddMethod(__Method_FreezeBalance, serviceImpl.FreezeBalance)
          .AddMethod(__Method_UnfreezeBalance, serviceImpl.UnfreezeBalance)
          .AddMethod(__Method_UnfreezeAsset, serviceImpl.UnfreezeAsset)
          .AddMethod(__Method_WithdrawBalance, serviceImpl.WithdrawBalance)
          .AddMethod(__Method_UpdateAsset, serviceImpl.UpdateAsset)
          .AddMethod(__Method_ListNodes, serviceImpl.ListNodes)
          .AddMethod(__Method_GetAssetIssueByAccount, serviceImpl.GetAssetIssueByAccount)
          .AddMethod(__Method_GetAccountNet, serviceImpl.GetAccountNet)
          .AddMethod(__Method_GetAssetIssueByName, serviceImpl.GetAssetIssueByName)
          .AddMethod(__Method_GetNowBlock, serviceImpl.GetNowBlock)
          .AddMethod(__Method_GetBlockByNum, serviceImpl.GetBlockByNum)
          .AddMethod(__Method_GetBlockById, serviceImpl.GetBlockById)
          .AddMethod(__Method_GetBlockByLimitNext, serviceImpl.GetBlockByLimitNext)
          .AddMethod(__Method_GetBlockByLatestNum, serviceImpl.GetBlockByLatestNum)
          .AddMethod(__Method_GetTransactionById, serviceImpl.GetTransactionById)
          .AddMethod(__Method_ListWitnesses, serviceImpl.ListWitnesses)
          .AddMethod(__Method_GetAssetIssueList, serviceImpl.GetAssetIssueList)
          .AddMethod(__Method_TotalTransaction, serviceImpl.TotalTransaction)
          .AddMethod(__Method_GetNextMaintenanceTime, serviceImpl.GetNextMaintenanceTime).Build();
    }

  }
  public static partial class WalletSolidity
  {
    static readonly string __ServiceName = "protocol.WalletSolidity";

    static readonly grpc::Marshaller<global::Tron.Net.Protocol.Account> __Marshaller_Account = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.Account.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.EmptyMessage> __Marshaller_EmptyMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.EmptyMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.WitnessList> __Marshaller_WitnessList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.WitnessList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.AssetIssueList> __Marshaller_AssetIssueList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.AssetIssueList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.Block> __Marshaller_Block = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.Block.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.NumberMessage> __Marshaller_NumberMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.NumberMessage.Parser.ParseFrom);

    static readonly grpc::Method<global::Tron.Net.Protocol.Account, global::Tron.Net.Protocol.Account> __Method_GetAccount = new grpc::Method<global::Tron.Net.Protocol.Account, global::Tron.Net.Protocol.Account>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccount",
        __Marshaller_Account,
        __Marshaller_Account);

    static readonly grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.WitnessList> __Method_ListWitnesses = new grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.WitnessList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListWitnesses",
        __Marshaller_EmptyMessage,
        __Marshaller_WitnessList);

    static readonly grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.AssetIssueList> __Method_GetAssetIssueList = new grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.AssetIssueList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssetIssueList",
        __Marshaller_EmptyMessage,
        __Marshaller_AssetIssueList);

    static readonly grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.Block> __Method_GetNowBlock = new grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.Block>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNowBlock",
        __Marshaller_EmptyMessage,
        __Marshaller_Block);

    static readonly grpc::Method<global::Tron.Net.Protocol.NumberMessage, global::Tron.Net.Protocol.Block> __Method_GetBlockByNum = new grpc::Method<global::Tron.Net.Protocol.NumberMessage, global::Tron.Net.Protocol.Block>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByNum",
        __Marshaller_NumberMessage,
        __Marshaller_Block);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tron.Net.Protocol.ApiReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of WalletSolidity</summary>
    public abstract partial class WalletSolidityBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Account> GetAccount(global::Tron.Net.Protocol.Account request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.WitnessList> ListWitnesses(global::Tron.Net.Protocol.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.AssetIssueList> GetAssetIssueList(global::Tron.Net.Protocol.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Block> GetNowBlock(global::Tron.Net.Protocol.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Block> GetBlockByNum(global::Tron.Net.Protocol.NumberMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for WalletSolidity</summary>
    public partial class WalletSolidityClient : grpc::ClientBase<WalletSolidityClient>
    {
      /// <summary>Creates a new client for WalletSolidity</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public WalletSolidityClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for WalletSolidity that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public WalletSolidityClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected WalletSolidityClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected WalletSolidityClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Tron.Net.Protocol.Account GetAccount(global::Tron.Net.Protocol.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Account GetAccount(global::Tron.Net.Protocol.Account request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Account> GetAccountAsync(global::Tron.Net.Protocol.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Account> GetAccountAsync(global::Tron.Net.Protocol.Account request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccount, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.WitnessList ListWitnesses(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWitnesses(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.WitnessList ListWitnesses(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListWitnesses, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.WitnessList> ListWitnessesAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWitnessesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.WitnessList> ListWitnessesAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListWitnesses, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.AssetIssueList GetAssetIssueList(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.AssetIssueList GetAssetIssueList(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssetIssueList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.AssetIssueList> GetAssetIssueListAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.AssetIssueList> GetAssetIssueListAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssetIssueList, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.Block GetNowBlock(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Block GetNowBlock(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNowBlock, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Block> GetNowBlockAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Block> GetNowBlockAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNowBlock, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.Block GetBlockByNum(global::Tron.Net.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Block GetBlockByNum(global::Tron.Net.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByNum, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Block> GetBlockByNumAsync(global::Tron.Net.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Block> GetBlockByNumAsync(global::Tron.Net.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByNum, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override WalletSolidityClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WalletSolidityClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(WalletSolidityBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAccount, serviceImpl.GetAccount)
          .AddMethod(__Method_ListWitnesses, serviceImpl.ListWitnesses)
          .AddMethod(__Method_GetAssetIssueList, serviceImpl.GetAssetIssueList)
          .AddMethod(__Method_GetNowBlock, serviceImpl.GetNowBlock)
          .AddMethod(__Method_GetBlockByNum, serviceImpl.GetBlockByNum).Build();
    }

  }
  public static partial class WalletExtension
  {
    static readonly string __ServiceName = "protocol.WalletExtension";

    static readonly grpc::Marshaller<global::Tron.Net.Protocol.AccountPaginated> __Marshaller_AccountPaginated = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.AccountPaginated.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.TransactionList> __Marshaller_TransactionList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.TransactionList.Parser.ParseFrom);

    static readonly grpc::Method<global::Tron.Net.Protocol.AccountPaginated, global::Tron.Net.Protocol.TransactionList> __Method_GetTransactionsFromThis = new grpc::Method<global::Tron.Net.Protocol.AccountPaginated, global::Tron.Net.Protocol.TransactionList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionsFromThis",
        __Marshaller_AccountPaginated,
        __Marshaller_TransactionList);

    static readonly grpc::Method<global::Tron.Net.Protocol.AccountPaginated, global::Tron.Net.Protocol.TransactionList> __Method_GetTransactionsToThis = new grpc::Method<global::Tron.Net.Protocol.AccountPaginated, global::Tron.Net.Protocol.TransactionList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionsToThis",
        __Marshaller_AccountPaginated,
        __Marshaller_TransactionList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tron.Net.Protocol.ApiReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of WalletExtension</summary>
    public abstract partial class WalletExtensionBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.TransactionList> GetTransactionsFromThis(global::Tron.Net.Protocol.AccountPaginated request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.TransactionList> GetTransactionsToThis(global::Tron.Net.Protocol.AccountPaginated request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for WalletExtension</summary>
    public partial class WalletExtensionClient : grpc::ClientBase<WalletExtensionClient>
    {
      /// <summary>Creates a new client for WalletExtension</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public WalletExtensionClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for WalletExtension that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public WalletExtensionClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected WalletExtensionClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected WalletExtensionClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Tron.Net.Protocol.TransactionList GetTransactionsFromThis(global::Tron.Net.Protocol.AccountPaginated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionsFromThis(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.TransactionList GetTransactionsFromThis(global::Tron.Net.Protocol.AccountPaginated request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionsFromThis, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.TransactionList> GetTransactionsFromThisAsync(global::Tron.Net.Protocol.AccountPaginated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionsFromThisAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.TransactionList> GetTransactionsFromThisAsync(global::Tron.Net.Protocol.AccountPaginated request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionsFromThis, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.TransactionList GetTransactionsToThis(global::Tron.Net.Protocol.AccountPaginated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionsToThis(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.TransactionList GetTransactionsToThis(global::Tron.Net.Protocol.AccountPaginated request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionsToThis, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.TransactionList> GetTransactionsToThisAsync(global::Tron.Net.Protocol.AccountPaginated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionsToThisAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.TransactionList> GetTransactionsToThisAsync(global::Tron.Net.Protocol.AccountPaginated request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionsToThis, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override WalletExtensionClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WalletExtensionClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(WalletExtensionBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetTransactionsFromThis, serviceImpl.GetTransactionsFromThis)
          .AddMethod(__Method_GetTransactionsToThis, serviceImpl.GetTransactionsToThis).Build();
    }

  }
  /// <summary>
  /// the api of tron's db
  /// </summary>
  public static partial class Database
  {
    static readonly string __ServiceName = "protocol.Database";

    static readonly grpc::Marshaller<global::Tron.Net.Protocol.EmptyMessage> __Marshaller_EmptyMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.EmptyMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.BlockReference> __Marshaller_BlockReference = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.BlockReference.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.DynamicProperties> __Marshaller_DynamicProperties = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.DynamicProperties.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.Block> __Marshaller_Block = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.Block.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tron.Net.Protocol.NumberMessage> __Marshaller_NumberMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tron.Net.Protocol.NumberMessage.Parser.ParseFrom);

    static readonly grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.BlockReference> __Method_getBlockReference = new grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.BlockReference>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getBlockReference",
        __Marshaller_EmptyMessage,
        __Marshaller_BlockReference);

    static readonly grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.DynamicProperties> __Method_GetDynamicProperties = new grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.DynamicProperties>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDynamicProperties",
        __Marshaller_EmptyMessage,
        __Marshaller_DynamicProperties);

    static readonly grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.Block> __Method_GetNowBlock = new grpc::Method<global::Tron.Net.Protocol.EmptyMessage, global::Tron.Net.Protocol.Block>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNowBlock",
        __Marshaller_EmptyMessage,
        __Marshaller_Block);

    static readonly grpc::Method<global::Tron.Net.Protocol.NumberMessage, global::Tron.Net.Protocol.Block> __Method_GetBlockByNum = new grpc::Method<global::Tron.Net.Protocol.NumberMessage, global::Tron.Net.Protocol.Block>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByNum",
        __Marshaller_NumberMessage,
        __Marshaller_Block);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tron.Net.Protocol.ApiReflection.Descriptor.Services[3]; }
    }

    /// <summary>Base class for server-side implementations of Database</summary>
    public abstract partial class DatabaseBase
    {
      /// <summary>
      /// for tapos
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.BlockReference> getBlockReference(global::Tron.Net.Protocol.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.DynamicProperties> GetDynamicProperties(global::Tron.Net.Protocol.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Block> GetNowBlock(global::Tron.Net.Protocol.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tron.Net.Protocol.Block> GetBlockByNum(global::Tron.Net.Protocol.NumberMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Database</summary>
    public partial class DatabaseClient : grpc::ClientBase<DatabaseClient>
    {
      /// <summary>Creates a new client for Database</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DatabaseClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Database that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DatabaseClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DatabaseClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DatabaseClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// for tapos
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tron.Net.Protocol.BlockReference getBlockReference(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getBlockReference(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// for tapos
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tron.Net.Protocol.BlockReference getBlockReference(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getBlockReference, null, options, request);
      }
      /// <summary>
      /// for tapos
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.BlockReference> getBlockReferenceAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getBlockReferenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// for tapos
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.BlockReference> getBlockReferenceAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getBlockReference, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.DynamicProperties GetDynamicProperties(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDynamicProperties(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.DynamicProperties GetDynamicProperties(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDynamicProperties, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.DynamicProperties> GetDynamicPropertiesAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDynamicPropertiesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.DynamicProperties> GetDynamicPropertiesAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDynamicProperties, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.Block GetNowBlock(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Block GetNowBlock(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNowBlock, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Block> GetNowBlockAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Block> GetNowBlockAsync(global::Tron.Net.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNowBlock, null, options, request);
      }
      public virtual global::Tron.Net.Protocol.Block GetBlockByNum(global::Tron.Net.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tron.Net.Protocol.Block GetBlockByNum(global::Tron.Net.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByNum, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Block> GetBlockByNumAsync(global::Tron.Net.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tron.Net.Protocol.Block> GetBlockByNumAsync(global::Tron.Net.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByNum, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DatabaseClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DatabaseClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DatabaseBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_getBlockReference, serviceImpl.getBlockReference)
          .AddMethod(__Method_GetDynamicProperties, serviceImpl.GetDynamicProperties)
          .AddMethod(__Method_GetNowBlock, serviceImpl.GetNowBlock)
          .AddMethod(__Method_GetBlockByNum, serviceImpl.GetBlockByNum).Build();
    }

  }
  /// <summary>
  /// the api of tron's network such as node list.
  /// </summary>
  public static partial class Network
  {
    static readonly string __ServiceName = "protocol.Network";


    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tron.Net.Protocol.ApiReflection.Descriptor.Services[4]; }
    }

    /// <summary>Base class for server-side implementations of Network</summary>
    public abstract partial class NetworkBase
    {
    }

    /// <summary>Client for Network</summary>
    public partial class NetworkClient : grpc::ClientBase<NetworkClient>
    {
      /// <summary>Creates a new client for Network</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NetworkClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Network that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NetworkClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NetworkClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NetworkClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NetworkClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NetworkClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(NetworkBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder().Build();
    }

  }
}
#endregion
